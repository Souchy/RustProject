

Positives
- cool
- Best package manager + build system, easy and works the same on every platform.
- Decent ecosystem.
- Fast.

Negatives
- Almost no dedicated IDE. Intellij RustRover and Zed. VSCode rust-analyzer is buggy + slow.
- Slow build times. Affects iteration time and "intellisense" refresh time
- A lot of obscure abreviations and shortcuts, relying on memory: Rc, Arc, vec![], ...
- Very verbose, heavy syntax: Arc<Mutex<dyn Message + Send + Sync>>
- strings vs arrays of chars: let str: String = String::from("") = "".to_string();
- Difficult async + relying on 3rd party runtimes. Arc everywhere to share memory between threads.
- Crates ecosystem a bit poor. Libraries dont have feature parity with other languages.
	- Protobuf crate doesnt support packages
	- Tonic crate doesnt support fields starting with "_" like "_id"
	- Mongo crate doesnt support other ids
	- Redis.OM crate claims they have JsonModel but it doesnt exist.
	- Web api crates like Axum dont generate automatic openapi data for a swagger page.
- Difficult/poor reflection, not embeded in the language, need crates and code generation.
- Not OOP. Subjective point.
- No way to cast between 2 traits, no upcasting https://stackoverflow.com/questions/34419561/can-i-cast-between-two-traits
- "cycle detected when checking effective visibility" hides relevant diagnostics message
	- actually a "MyTrait cannot be made into an object" from things like Box<dyn MyTrait>
- global mutable variables are a pain
	- mutex/locks
	- unsafe
- Result<(), Box<dyn Error + Send + Sync>> partout en async
