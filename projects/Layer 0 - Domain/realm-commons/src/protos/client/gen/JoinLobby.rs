// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `JoinLobby.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

// @@protoc_insertion_point(message:JoinLobby)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct JoinLobby {
    // message fields
    // @@protoc_insertion_point(field:JoinLobby.queue)
    pub queue: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:JoinLobby.lobby)
    pub lobby: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:JoinLobby.token)
    pub token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:JoinLobby.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JoinLobby {
    fn default() -> &'a JoinLobby {
        <JoinLobby as ::protobuf::Message>::default_instance()
    }
}

impl JoinLobby {
    pub fn new() -> JoinLobby {
        ::std::default::Default::default()
    }

    // required int32 queue = 1;

    pub fn queue(&self) -> i32 {
        self.queue.unwrap_or(0)
    }

    pub fn clear_queue(&mut self) {
        self.queue = ::std::option::Option::None;
    }

    pub fn has_queue(&self) -> bool {
        self.queue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_queue(&mut self, v: i32) {
        self.queue = ::std::option::Option::Some(v);
    }

    // required int64 lobby = 2;

    pub fn lobby(&self) -> i64 {
        self.lobby.unwrap_or(0)
    }

    pub fn clear_lobby(&mut self) {
        self.lobby = ::std::option::Option::None;
    }

    pub fn has_lobby(&self) -> bool {
        self.lobby.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lobby(&mut self, v: i64) {
        self.lobby = ::std::option::Option::Some(v);
    }

    // required string token = 3;

    pub fn token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_token(&mut self) {
        self.token = ::std::option::Option::None;
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "queue",
            |m: &JoinLobby| { &m.queue },
            |m: &mut JoinLobby| { &mut m.queue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lobby",
            |m: &JoinLobby| { &m.lobby },
            |m: &mut JoinLobby| { &mut m.lobby },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "token",
            |m: &JoinLobby| { &m.token },
            |m: &mut JoinLobby| { &mut m.token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JoinLobby>(
            "JoinLobby",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JoinLobby {
    const NAME: &'static str = "JoinLobby";

    fn is_initialized(&self) -> bool {
        if self.queue.is_none() {
            return false;
        }
        if self.lobby.is_none() {
            return false;
        }
        if self.token.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.queue = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.lobby = ::std::option::Option::Some(is.read_int64()?);
                },
                26 => {
                    self.token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.queue {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.lobby {
            my_size += ::protobuf::rt::int64_size(2, v);
        }
        if let Some(v) = self.token.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.queue {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.lobby {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.token.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JoinLobby {
        JoinLobby::new()
    }

    fn clear(&mut self) {
        self.queue = ::std::option::Option::None;
        self.lobby = ::std::option::Option::None;
        self.token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JoinLobby {
        static instance: JoinLobby = JoinLobby {
            queue: ::std::option::Option::None,
            lobby: ::std::option::Option::None,
            token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JoinLobby {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JoinLobby").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JoinLobby {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JoinLobby {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fJoinLobby.proto\"M\n\tJoinLobby\x12\x14\n\x05queue\x18\x01\x20\x02\
    (\x05R\x05queue\x12\x14\n\x05lobby\x18\x02\x20\x02(\x03R\x05lobby\x12\
    \x14\n\x05token\x18\x03\x20\x02(\tR\x05tokenb\x06proto2\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(JoinLobby::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
