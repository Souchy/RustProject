// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `objects.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:Lobby)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Lobby {
    // message fields
    // @@protoc_insertion_point(field:Lobby.id)
    pub id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Lobby.queue)
    pub queue: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Lobby.LobbyState)
    pub LobbyState: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Lobby.players)
    pub players: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:Lobby.queueStartTime)
    pub queueStartTime: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:Lobby.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Lobby {
    fn default() -> &'a Lobby {
        <Lobby as ::protobuf::Message>::default_instance()
    }
}

impl Lobby {
    pub fn new() -> Lobby {
        ::std::default::Default::default()
    }

    // required int32 id = 1;

    pub fn id(&self) -> i32 {
        self.id.unwrap_or(0)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = ::std::option::Option::Some(v);
    }

    // required int32 queue = 2;

    pub fn queue(&self) -> i32 {
        self.queue.unwrap_or(0)
    }

    pub fn clear_queue(&mut self) {
        self.queue = ::std::option::Option::None;
    }

    pub fn has_queue(&self) -> bool {
        self.queue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_queue(&mut self, v: i32) {
        self.queue = ::std::option::Option::Some(v);
    }

    // optional int32 LobbyState = 3;

    pub fn LobbyState(&self) -> i32 {
        self.LobbyState.unwrap_or(0)
    }

    pub fn clear_LobbyState(&mut self) {
        self.LobbyState = ::std::option::Option::None;
    }

    pub fn has_LobbyState(&self) -> bool {
        self.LobbyState.is_some()
    }

    // Param is passed by value, moved
    pub fn set_LobbyState(&mut self, v: i32) {
        self.LobbyState = ::std::option::Option::Some(v);
    }

    // optional int32 queueStartTime = 5;

    pub fn queueStartTime(&self) -> i32 {
        self.queueStartTime.unwrap_or(0)
    }

    pub fn clear_queueStartTime(&mut self) {
        self.queueStartTime = ::std::option::Option::None;
    }

    pub fn has_queueStartTime(&self) -> bool {
        self.queueStartTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_queueStartTime(&mut self, v: i32) {
        self.queueStartTime = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "id",
            |m: &Lobby| { &m.id },
            |m: &mut Lobby| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "queue",
            |m: &Lobby| { &m.queue },
            |m: &mut Lobby| { &mut m.queue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "LobbyState",
            |m: &Lobby| { &m.LobbyState },
            |m: &mut Lobby| { &mut m.LobbyState },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "players",
            |m: &Lobby| { &m.players },
            |m: &mut Lobby| { &mut m.players },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "queueStartTime",
            |m: &Lobby| { &m.queueStartTime },
            |m: &mut Lobby| { &mut m.queueStartTime },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Lobby>(
            "Lobby",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Lobby {
    const NAME: &'static str = "Lobby";

    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        if self.queue.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.queue = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.LobbyState = ::std::option::Option::Some(is.read_int32()?);
                },
                34 => {
                    is.read_repeated_packed_int32_into(&mut self.players)?;
                },
                32 => {
                    self.players.push(is.read_int32()?);
                },
                40 => {
                    self.queueStartTime = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.queue {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.LobbyState {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        for value in &self.players {
            my_size += ::protobuf::rt::int32_size(4, *value);
        };
        if let Some(v) = self.queueStartTime {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.queue {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.LobbyState {
            os.write_int32(3, v)?;
        }
        for v in &self.players {
            os.write_int32(4, *v)?;
        };
        if let Some(v) = self.queueStartTime {
            os.write_int32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Lobby {
        Lobby::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.queue = ::std::option::Option::None;
        self.LobbyState = ::std::option::Option::None;
        self.players.clear();
        self.queueStartTime = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Lobby {
        static instance: Lobby = Lobby {
            id: ::std::option::Option::None,
            queue: ::std::option::Option::None,
            LobbyState: ::std::option::Option::None,
            players: ::std::vec::Vec::new(),
            queueStartTime: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Lobby {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Lobby").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Lobby {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Lobby {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Lobby`
pub mod lobby {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:Lobby.LobbyState)
    pub enum LobbyState {
        // @@protoc_insertion_point(enum_value:Lobby.LobbyState.LOBBY_STATE_IDLE)
        LOBBY_STATE_IDLE = 0,
        // @@protoc_insertion_point(enum_value:Lobby.LobbyState.LOBBY_STATE_IN_QUEUE)
        LOBBY_STATE_IN_QUEUE = 1,
        // @@protoc_insertion_point(enum_value:Lobby.LobbyState.LOBBY_STATE_IN_PREGAME)
        LOBBY_STATE_IN_PREGAME = 2,
    }

    impl ::protobuf::Enum for LobbyState {
        const NAME: &'static str = "LobbyState";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<LobbyState> {
            match value {
                0 => ::std::option::Option::Some(LobbyState::LOBBY_STATE_IDLE),
                1 => ::std::option::Option::Some(LobbyState::LOBBY_STATE_IN_QUEUE),
                2 => ::std::option::Option::Some(LobbyState::LOBBY_STATE_IN_PREGAME),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<LobbyState> {
            match str {
                "LOBBY_STATE_IDLE" => ::std::option::Option::Some(LobbyState::LOBBY_STATE_IDLE),
                "LOBBY_STATE_IN_QUEUE" => ::std::option::Option::Some(LobbyState::LOBBY_STATE_IN_QUEUE),
                "LOBBY_STATE_IN_PREGAME" => ::std::option::Option::Some(LobbyState::LOBBY_STATE_IN_PREGAME),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [LobbyState] = &[
            LobbyState::LOBBY_STATE_IDLE,
            LobbyState::LOBBY_STATE_IN_QUEUE,
            LobbyState::LOBBY_STATE_IN_PREGAME,
        ];
    }

    impl ::protobuf::EnumFull for LobbyState {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Lobby.LobbyState").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for LobbyState {
        fn default() -> Self {
            LobbyState::LOBBY_STATE_IDLE
        }
    }

    impl LobbyState {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<LobbyState>("Lobby.LobbyState")
        }
    }
}

// @@protoc_insertion_point(message:Player)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Player {
    // message fields
    // @@protoc_insertion_point(field:Player.id)
    pub id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Player.state)
    pub state: ::std::option::Option<::protobuf::EnumOrUnknown<player::PlayerState>>,
    // @@protoc_insertion_point(field:Player.lobby)
    pub lobby: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Player.mmr)
    pub mmr: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Player.recentMatches)
    pub recentMatches: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Player.geolocalisation)
    pub geolocalisation: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:Player.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Player {
    fn default() -> &'a Player {
        <Player as ::protobuf::Message>::default_instance()
    }
}

impl Player {
    pub fn new() -> Player {
        ::std::default::Default::default()
    }

    // required int32 id = 1;

    pub fn id(&self) -> i32 {
        self.id.unwrap_or(0)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = ::std::option::Option::Some(v);
    }

    // optional .Player.PlayerState state = 2;

    pub fn state(&self) -> player::PlayerState {
        match self.state {
            Some(e) => e.enum_value_or(player::PlayerState::PLAYER_STATE_IDLE),
            None => player::PlayerState::PLAYER_STATE_IDLE,
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: player::PlayerState) {
        self.state = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional int32 lobby = 3;

    pub fn lobby(&self) -> i32 {
        self.lobby.unwrap_or(0)
    }

    pub fn clear_lobby(&mut self) {
        self.lobby = ::std::option::Option::None;
    }

    pub fn has_lobby(&self) -> bool {
        self.lobby.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lobby(&mut self, v: i32) {
        self.lobby = ::std::option::Option::Some(v);
    }

    // optional int32 mmr = 4;

    pub fn mmr(&self) -> i32 {
        self.mmr.unwrap_or(0)
    }

    pub fn clear_mmr(&mut self) {
        self.mmr = ::std::option::Option::None;
    }

    pub fn has_mmr(&self) -> bool {
        self.mmr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mmr(&mut self, v: i32) {
        self.mmr = ::std::option::Option::Some(v);
    }

    // optional int32 recentMatches = 5;

    pub fn recentMatches(&self) -> i32 {
        self.recentMatches.unwrap_or(0)
    }

    pub fn clear_recentMatches(&mut self) {
        self.recentMatches = ::std::option::Option::None;
    }

    pub fn has_recentMatches(&self) -> bool {
        self.recentMatches.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recentMatches(&mut self, v: i32) {
        self.recentMatches = ::std::option::Option::Some(v);
    }

    // optional int32 geolocalisation = 6;

    pub fn geolocalisation(&self) -> i32 {
        self.geolocalisation.unwrap_or(0)
    }

    pub fn clear_geolocalisation(&mut self) {
        self.geolocalisation = ::std::option::Option::None;
    }

    pub fn has_geolocalisation(&self) -> bool {
        self.geolocalisation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_geolocalisation(&mut self, v: i32) {
        self.geolocalisation = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "id",
            |m: &Player| { &m.id },
            |m: &mut Player| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &Player| { &m.state },
            |m: &mut Player| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lobby",
            |m: &Player| { &m.lobby },
            |m: &mut Player| { &mut m.lobby },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "mmr",
            |m: &Player| { &m.mmr },
            |m: &mut Player| { &mut m.mmr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "recentMatches",
            |m: &Player| { &m.recentMatches },
            |m: &mut Player| { &mut m.recentMatches },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "geolocalisation",
            |m: &Player| { &m.geolocalisation },
            |m: &mut Player| { &mut m.geolocalisation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Player>(
            "Player",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Player {
    const NAME: &'static str = "Player";

    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                24 => {
                    self.lobby = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.mmr = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.recentMatches = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.geolocalisation = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.lobby {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.mmr {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.recentMatches {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.geolocalisation {
            my_size += ::protobuf::rt::int32_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.state {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.lobby {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.mmr {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.recentMatches {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.geolocalisation {
            os.write_int32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Player {
        Player::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.lobby = ::std::option::Option::None;
        self.mmr = ::std::option::Option::None;
        self.recentMatches = ::std::option::Option::None;
        self.geolocalisation = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Player {
        static instance: Player = Player {
            id: ::std::option::Option::None,
            state: ::std::option::Option::None,
            lobby: ::std::option::Option::None,
            mmr: ::std::option::Option::None,
            recentMatches: ::std::option::Option::None,
            geolocalisation: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Player {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Player").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Player {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Player {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Player`
pub mod player {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:Player.PlayerState)
    pub enum PlayerState {
        // @@protoc_insertion_point(enum_value:Player.PlayerState.PLAYER_STATE_IDLE)
        PLAYER_STATE_IDLE = 0,
        // @@protoc_insertion_point(enum_value:Player.PlayerState.PLAYER_STATE_IN_LOBBY)
        PLAYER_STATE_IN_LOBBY = 1,
        // @@protoc_insertion_point(enum_value:Player.PlayerState.PLAYER_STATE_IN_QUEUE)
        PLAYER_STATE_IN_QUEUE = 2,
        // @@protoc_insertion_point(enum_value:Player.PlayerState.PLAYER_STATE_IN_PREGAME)
        PLAYER_STATE_IN_PREGAME = 3,
        // @@protoc_insertion_point(enum_value:Player.PlayerState.PLAYER_STATE_IN_GAME)
        PLAYER_STATE_IN_GAME = 4,
    }

    impl ::protobuf::Enum for PlayerState {
        const NAME: &'static str = "PlayerState";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<PlayerState> {
            match value {
                0 => ::std::option::Option::Some(PlayerState::PLAYER_STATE_IDLE),
                1 => ::std::option::Option::Some(PlayerState::PLAYER_STATE_IN_LOBBY),
                2 => ::std::option::Option::Some(PlayerState::PLAYER_STATE_IN_QUEUE),
                3 => ::std::option::Option::Some(PlayerState::PLAYER_STATE_IN_PREGAME),
                4 => ::std::option::Option::Some(PlayerState::PLAYER_STATE_IN_GAME),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<PlayerState> {
            match str {
                "PLAYER_STATE_IDLE" => ::std::option::Option::Some(PlayerState::PLAYER_STATE_IDLE),
                "PLAYER_STATE_IN_LOBBY" => ::std::option::Option::Some(PlayerState::PLAYER_STATE_IN_LOBBY),
                "PLAYER_STATE_IN_QUEUE" => ::std::option::Option::Some(PlayerState::PLAYER_STATE_IN_QUEUE),
                "PLAYER_STATE_IN_PREGAME" => ::std::option::Option::Some(PlayerState::PLAYER_STATE_IN_PREGAME),
                "PLAYER_STATE_IN_GAME" => ::std::option::Option::Some(PlayerState::PLAYER_STATE_IN_GAME),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [PlayerState] = &[
            PlayerState::PLAYER_STATE_IDLE,
            PlayerState::PLAYER_STATE_IN_LOBBY,
            PlayerState::PLAYER_STATE_IN_QUEUE,
            PlayerState::PLAYER_STATE_IN_PREGAME,
            PlayerState::PLAYER_STATE_IN_GAME,
        ];
    }

    impl ::protobuf::EnumFull for PlayerState {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Player.PlayerState").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for PlayerState {
        fn default() -> Self {
            PlayerState::PLAYER_STATE_IDLE
        }
    }

    impl PlayerState {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<PlayerState>("Player.PlayerState")
        }
    }
}

// @@protoc_insertion_point(message:User)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct User {
    // message fields
    // @@protoc_insertion_point(field:User.id)
    pub id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:User.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:User.email)
    pub email: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:User.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a User {
    fn default() -> &'a User {
        <User as ::protobuf::Message>::default_instance()
    }
}

impl User {
    pub fn new() -> User {
        ::std::default::Default::default()
    }

    // required int32 id = 1;

    pub fn id(&self) -> i32 {
        self.id.unwrap_or(0)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = ::std::option::Option::Some(v);
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string email = 3;

    pub fn email(&self) -> &str {
        match self.email.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_email(&mut self) {
        self.email = ::std::option::Option::None;
    }

    pub fn has_email(&self) -> bool {
        self.email.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        if self.email.is_none() {
            self.email = ::std::option::Option::Some(::std::string::String::new());
        }
        self.email.as_mut().unwrap()
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        self.email.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "id",
            |m: &User| { &m.id },
            |m: &mut User| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &User| { &m.name },
            |m: &mut User| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "email",
            |m: &User| { &m.email },
            |m: &mut User| { &mut m.email },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<User>(
            "User",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for User {
    const NAME: &'static str = "User";

    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.email = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.email.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.email.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> User {
        User::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.email = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static User {
        static instance: User = User {
            id: ::std::option::Option::None,
            name: ::std::option::Option::None,
            email: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for User {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("User").unwrap()).clone()
    }
}

impl ::std::fmt::Display for User {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for User {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\robjects.proto\"\xe9\x01\n\x05Lobby\x12\x0e\n\x02id\x18\x01\x20\x02(\
    \x05R\x02id\x12\x14\n\x05queue\x18\x02\x20\x02(\x05R\x05queue\x12\x1e\n\
    \nLobbyState\x18\x03\x20\x01(\x05R\nLobbyState\x12\x18\n\x07players\x18\
    \x04\x20\x03(\x05R\x07players\x12&\n\x0equeueStartTime\x18\x05\x20\x01(\
    \x05R\x0equeueStartTime\"X\n\nLobbyState\x12\x14\n\x10LOBBY_STATE_IDLE\
    \x10\0\x12\x18\n\x14LOBBY_STATE_IN_QUEUE\x10\x01\x12\x1a\n\x16LOBBY_STAT\
    E_IN_PREGAME\x10\x02\"\xcf\x02\n\x06Player\x12\x0e\n\x02id\x18\x01\x20\
    \x02(\x05R\x02id\x12)\n\x05state\x18\x02\x20\x01(\x0e2\x13.Player.Player\
    StateR\x05state\x12\x14\n\x05lobby\x18\x03\x20\x01(\x05R\x05lobby\x12\
    \x10\n\x03mmr\x18\x04\x20\x01(\x05R\x03mmr\x12$\n\rrecentMatches\x18\x05\
    \x20\x01(\x05R\rrecentMatches\x12(\n\x0fgeolocalisation\x18\x06\x20\x01(\
    \x05R\x0fgeolocalisation\"\x91\x01\n\x0bPlayerState\x12\x15\n\x11PLAYER_\
    STATE_IDLE\x10\0\x12\x19\n\x15PLAYER_STATE_IN_LOBBY\x10\x01\x12\x19\n\
    \x15PLAYER_STATE_IN_QUEUE\x10\x02\x12\x1b\n\x17PLAYER_STATE_IN_PREGAME\
    \x10\x03\x12\x18\n\x14PLAYER_STATE_IN_GAME\x10\x04\"@\n\x04User\x12\x0e\
    \n\x02id\x18\x01\x20\x02(\x05R\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\
    \tR\x04name\x12\x14\n\x05email\x18\x03\x20\x01(\tR\x05emailb\x06proto2\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Lobby::generated_message_descriptor_data());
            messages.push(Player::generated_message_descriptor_data());
            messages.push(User::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(lobby::LobbyState::generated_enum_descriptor_data());
            enums.push(player::PlayerState::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
